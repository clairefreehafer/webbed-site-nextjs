generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Photo {
  id          Int       @id @default(autoincrement())
  smugMugKey  String    @db.VarChar(255) @unique
  url         String?   @db.VarChar(255) @unique
  captureDate DateTime? @db.Timestamp(6)
  title       String?   @db.VarChar(255)
  description String?   @db.VarChar(255)
  xmpPath     String    @db.VarChar(255) @unique @default("")
  altText     String?   @db.VarChar(255)
  tags        Tag[]
  album       Album?    @relation("albumPhotos", fields: albumName, references: [name])
  albumName   String?
  covers      Album[]   @relation("coverPhoto")
}

model Tag {
  id         Int     @id @default(autoincrement())
  name       String  @unique
  parent     Tag?    @relation("tagHierarchy", fields: [parentName], references: [name])
  parentName String?
  children   Tag[]   @relation("tagHierarchy")
  photos     Photo[]
}

model Album {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(255) @unique
  date            DateTime? @db.Timestamp(6)
  section         String[]
  type            String    @db.VarChar(255) @default("default")
  photos          Photo[]   @relation("albumPhotos")
  coverPhoto      Photo?    @relation("coverPhoto", fields: coverKey, references: [smugMugKey])
  coverKey        String?
  sectionTest     Section?  @relation(fields: sectionTestName, references: name)
  sectionTestName String?
  icon            Icon?     @relation(fields: iconId, references: [id])
  iconId          Int?
}

model Section {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255) @unique
  parent     Section?  @relation("sectionHierarchy", fields: [parentName], references: [name])
  parentName String?
  children   Section[] @relation("sectionHierarchy")
  albums     Album[]
  icon       Icon?     @relation(fields: iconId, references: [id])
  iconId     Int?
}

model Icon {
  id        Int       @id @default(autoincrement())
  imagePath String?   @db.VarChar(255)
  character String?   @db.VarChar(255)
  albums    Album[]
  sections  Section[]
}
