generator client {
  provider = "prisma-client-js"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Photo {
  id          Int       @id @default(autoincrement())
  smugMugKey  String    @unique @db.VarChar(255)
  url         String?   @unique @db.VarChar(255)
  captureDate DateTime? @db.Timestamp(6)
  /// [Metadata]
  metadata    Json?
  xmpPath     String    @unique @default("") @db.VarChar(255)
  altText     String?   @db.VarChar(255)
  tags        Tag[]
  album       Album?    @relation("albumPhotos", fields: albumName, references: [name])
  albumName   String?
  covers      Album[]   @relation("coverPhoto")
  icon        Icon?     @relation(fields: iconId, references: [id])
  iconId      Int?
}

model Tag {
  id         Int     @id @default(autoincrement())
  name       String  @unique
  parent     Tag?    @relation("tagHierarchy", fields: [parentName], references: [name])
  parentName String?
  children   Tag[]   @relation("tagHierarchy")
  photos     Photo[]
}

model Album {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(255)
  date        DateTime? @db.Timestamp(6)
  type        String    @default("default") @db.VarChar(255)
  photos      Photo[]   @relation("albumPhotos")
  coverPhoto  Photo?    @relation("coverPhoto", fields: coverKey, references: [smugMugKey])
  coverKey    String?
  section     Section   @relation(fields: sectionName, references: name)
  sectionName String
  icon        Icon?     @relation(fields: iconId, references: [id])
  iconId      Int?
}

model Section {
  id         Int       @id @default(autoincrement())
  name       String    @unique @db.VarChar(255)
  parent     Section?  @relation("sectionHierarchy", fields: [parentName], references: [name])
  parentName String?
  children   Section[] @relation("sectionHierarchy")
  albums     Album[]
  icon       Icon?     @relation(fields: iconId, references: [id])
  iconId     Int?
}

model Icon {
  id        Int       @id @default(autoincrement())
  imagePath String?   @db.VarChar(255)
  character String?   @db.VarChar(255)
  text      String?   @db.VarChar
  albums    Album[]
  sections  Section[]
  photos    Photo[]
}

model List {
  id            Int        @id @default(autoincrement())
  name          String     @unique @db.VarChar(255)
  description   String?    @db.VarChar
  items         ListItem[]
  sortBy        String?    @db.VarChar(255)
  sortDirection String?    @db.VarChar(255)
}

model ListItem {
  id    Int    @id @default(autoincrement())
  type  String @db.VarChar(255)
  /// [ListItemData]
  data  Json
  lists List[]
}

model Recipe {
  id           Int          @id @default(autoincrement())
  title        String       @db.VarChar(255)
  ingredients  Ingredient[]
  instructions String[]
  url          String?      @db.VarChar
}

model Ingredient {
  id       Int      @id @default(autoincrement())
  quantity Int
  unit     String
  recipes  Recipe[]
  food     Food     @relation("ingredients", fields: [foodId], references: [id])
  foodId   Int
}

model Food {
  id          Int          @id @default(autoincrement())
  name        String
  category    String?
  ingredients Ingredient[] @relation("ingredients")
}
